import Head from "next/head";
import { useWeb3 } from "@3rdweb/hooks";
import { Box, Button, Menu, Text, Heading, Divider } from "@chakra-ui/react";
import { IoMdWallet } from "react-icons/io";
import { useEffect, useMemo, useState } from "react";
import NetworkMetadata from "../components/NetworkMetadata";
import { fetchQuestions, addQuestion } from "../common/questions";
import { addAnswer, fetchAnswers, purchaseAnswer } from "../common/answers";

const exampleQuestion = {
  title: "test question title",
  content: "what is the meaning of life?",
};

const exampleAnswer = {
  content: "dunno",
};

const enrichAnswersWithUnlockedPerQuestion = (unlockedAnswers) => (curr) =>
  curr.map((question) => {
    const unlockedAnswersPerQuestion = unlockedAnswers.filter(
      ({ questionId }) => questionId === question.id
    );

    if (unlockedAnswersPerQuestion.length === 0) {
      return question;
    }

    const resolvedAnswers = question.answers.map((answer) => {
      const matchedUnlocked = unlockedAnswersPerQuestion.find(
        ({ id }) => id === answer.id
      );

      return matchedUnlocked
        ? {
            ...answer,
            ...matchedUnlocked,
            blocked: false,
          }
        : answer;
    });

    return {
      ...question,
      answers: resolvedAnswers,
    };
  });

const Questions = ({ questions, address }) => {
  const [questionsWithUnlockedAnswers, setQuestionsWithUnlockedAnswers] =
    useState(questions);

  /**
   * @description
   * This might be done better using well defined RQ cache
   */
  useEffect(() => {
    if (address) {
      fetchAnswers(address).then((unlockedAnswers) => {
        setQuestionsWithUnlockedAnswers(
          enrichAnswersWithUnlockedPerQuestion(unlockedAnswers)
        );
      });
    }
  }, [address]);

  return (
    <Box>
      {questionsWithUnlockedAnswers.map((question) => (
        <Box
          key={question.id}
          maxW="sm"
          borderWidth="1px"
          borderRadius="lg"
          overflow="hidden"
        >
          <Box mt="1" fontWeight="semibold" lineHeight="tight" isTruncated>
            <Heading as="h4" textAlign="center" color="black">
              {question.title}
            </Heading>

            <Text textAlign="center" color="black">
              {question.content}
            </Text>
          </Box>
          <Divider />
          <Box
            display="flex"
            flexDirection="column"
            mt="1"
            fontWeight="semibold"
            lineHeight="tight"
            isTruncated
          >
            {question.answers.map((answer) =>
              !!answer.blocked ? (
                <Button
                  key={answer.id}
                  onClick={() => purchaseAnswer(answer.id)}
                  colorScheme="green"
                >
                  Unlock this answer
                </Button>
              ) : (
                <Text
                  height="40px"
                  key={answer.id}
                  textAlign="center"
                  color="black"
                >
                  {answer.content}
                </Text>
              )
            )}
          </Box>
          <Divider />
          <Box
            justifyContent="center"
            mt="1"
            fontWeight="semibold"
            lineHeight="tight"
            isTruncated
          >
            <Button
              onClick={() =>
                addAnswer(question.id, {
                  ...exampleAnswer,
                  authorId: address,
                })
              }
              colorScheme="orange"
            >
              Add example answer
            </Button>
          </Box>
        </Box>
      ))}
    </Box>
  );
};

export async function getServerSideProps() {
  const questions = await fetchQuestions();

  return {
    props: { questions },
  };
}

export default function Home({ questions }) {
  const { address, chainId, connectWallet, getNetworkMetadata } = useWeb3();

  const networkMetadata = useMemo(() => {
    if (chainId) {
      return getNetworkMetadata(chainId);
    }
  }, [chainId, getNetworkMetadata]);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Box bg="black" w="100%" p={4} color="white" alignItems="center">
          {address ? (
            <Menu>
              {networkMetadata && <NetworkMetadata {...networkMetadata} />}
            </Menu>
          ) : (
            <>
              <Button
                onClick={() => connectWallet("injected")}
                leftIcon={<IoMdWallet />}
                colorScheme="purple"
              >
                Connect MetaMask
              </Button>
            </>
          )}
        </Box>
        <Box w="100%" p={4} color="white">
          <Questions questions={questions} address={address} />
          {address ? (
            <Button
              onClick={() =>
                addQuestion({
                  ...exampleQuestion,
                  authorId: address,
                })
              }
              colorScheme="red"
            >
              Add example question
            </Button>
          ) : null}
        </Box>
      </main>
    </div>
  );
}
